#+title: "Emacs Settings"
#+options: toc:2

* Hide Bars Quickly
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (toggle-scroll-bar -1)
  (tool-bar-mode -1)
  (save-place-mode 1)
#+end_src
* Bootstrap Straight + All The Icons Stuff
#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (defvar all-the-icons-fonts-installed? t)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (setq all-the-icons-fonts-installed? nil)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)
  (defmacro pkg (name &rest args)
    "Load a package like use package."
    (declare (indent 1))
    `(use-package ,name :straight t ,@args))
  (defmacro pkg-github (name repo &rest args)
    (declare (indent 2))
    `(use-package ,name
       :straight (,name
                  :type git
                  :host github
                  :repo ,repo)
       ,@args))
#+end_src
** Hide Minor Modes
#+begin_src emacs-lisp
(pkg diminish)
#+end_src
* Fix Slow Frame Manipulation in Pgtk-Emacs
#+begin_src emacs-lisp
  (setq pgtk-wait-for-event-timeout nil)
#+end_src
* Utility Functions
** Automatically Create Files
#+begin_src emacs-lisp
  (defun ensure-file (path)
    "Create file at path if it does not exist, return path."
    (unless (file-exists-p path)
      (write-region "" nil path))
    path)
  (defun ensure-directory (path)
    "Create directory at path if it does not exist, return path."
    (unless (file-exists-p path)
      (make-directory path))
    path)
#+end_src
** File Functions
#+begin_src emacs-lisp
  (defun map-files (fun file-list)
    "Do fun with the buffer as each file in file-list."
    (dolist (file file-list)
      (let ((buf (find-file file)))
        (goto-char (point-min))						; in case file is open
        (funcall fun)
        (save-buffer)
        (kill-buffer buf))))
  (defmacro dofiles (fspec &rest body)
    "Call map-files with body across fspec where fspec is (directory regexp) or a list of such forms."
    (declare (indent 1))
    (require 'find-lisp)
    (when (stringp (car fspec)) (setq fspec (list fspec)))
    `(map-files (lambda () ,@body)
                (mapcan (lambda (e) (apply 'find-lisp-find-files e)) ',fspec)))

  (defmacro measure-time (&rest body)
    (declare (indent 0))
    "Measure the time it takes to evaluate BODY."
    (let ((time (gensym)) (result (gensym)))
      `(let* ((,time (current-time))
              (,result (progn ,@body)))
         (message "%.06f" (float-time (time-since ,time)))
         ,result)))

  (defun insert-file-name (name)
    (interactive "F")
    (insert name))
#+end_src
** Undo-Group
#+begin_src emacs-lisp
  (defmacro undo-group (&rest body)
    "Do the arguments as one undo section."
    (declare (indent 0))
    (let ((marker (gensym)))
      `(let ((,marker (prepare-change-group)))
         (unwind-protect (atomic-change-group ,@body)
           (undo-amalgamate-change-group ,marker)))))

#+end_src
** Interactive-Chain
#+begin_src emacs-lisp
  (defmacro interactive-chain (&rest args)
    "Make an interactive lambda that calls the quoted functions in args."
    (declare (indent 0))
    `(lambda () (interactive) ,@(mapcar #'cdr args)))
#+end_src
** Toggle
#+begin_src emacs-lisp
  (defmacro interactive-toggle (var-name)
    "Define a toggle function for var-name and return it."
    `(evil-define-command ,(intern (concat "toggle-" (symbol-name var-name)))
       (setq ,var-name (not ,var-name))))
#+end_src
* Put Custom Defs in a Non-git-tracked File
#+begin_src emacs-lisp
  (setq custom-file (ensure-file (concat user-emacs-directory "custom.el")))
#+end_src
* Deal With Backups
#+begin_src emacs-lisp
  (push '("\\.\\(vcf\\|gpg\\)$" . sensitive-minor-mode) auto-mode-alist) ; don't backup keys
  (defvar backup-dir (ensure-directory (concat user-emacs-directory "backups/")))
  (setq
   backup-by-copying t ; don't clobber symlinks
   backup-directory-alist `(("." . ,backup-dir)) ; don't litter my fs tree
   delete-old-versions t
   kept-new-versions 10
   kept-old-versions 0 ; don't keep the oldest backups
   version-control t ; use versioned backups
   vc-make-backup-files t)
#+end_src
* Prefix Key Behaviour
** Translate at Any Point in a Chord
#+begin_src emacs-lisp
  (defmacro translate (key states event &rest bindings)
    "Translate (kbd key) to (kbd event) in states (quoted as in evil-define-key but not nil)."
    (declare (indent 0))
    `(progn (define-key key-translation-map
              (kbd ,key) (lambda (_)
                           (pcase evil-state
                             (,(if (symbolp (cadr states))
                                   states
                                 (cons 'or (mapcar (lambda (a) `',a) (cadr states))))
                              (kbd ,event))
                             (_ (kbd ,key)))))
            ,(if bindings `(translate ,@bindings))))
  (defun send-keys (keys)
    (setq prefix-arg current-prefix-arg)
    (setq unread-command-events
          (nconc (mapcar (lambda (i) (cons t i)) (kbd keys))
                 unread-command-events)))
#+end_src
** Only Translate a Prefix
#+begin_src emacs-lisp
  (defmacro prefix-translate (key states event &rest bindings)
    "Translate but only for keys that appear at the start of chords."
    (declare (indent 0))
    `(with-eval-after-load 'evil
       (evil-define-key ,states 'global
         (kbd ,key) (lambda () (interactive) (send-keys ,event)))
       ,@(if bindings (cddr (macroexpand-1 `(prefix-translate ,@bindings))))))
#+end_src
** Default Binds
#+begin_src emacs-lisp
  (prefix-translate
    "SPC" '(normal visual) "<leader>"
    "\\" '(normal visual) "<global-leader>"
    "M-;" 'insert "<leader>"
    "M-:" 'insert "<global-leader>")
#+end_src
* Tab Width
#+begin_src emacs-lisp
  (setq-default tab-width 2)
  (setq-default evil-shift-width tab-width)
  (setq-default rust-indent-offset tab-width)
  (setq backward-delete-char-untabify-method 'all)
#+end_src
* Prettify Emacs
** Font
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(font . "Iosevka 9"))
  (set-face-attribute 'default t :font "Iosevka")
#+end_src
** Icons
#+begin_src emacs-lisp
  (pkg all-the-icons
      :defer t
      :config
      (unless all-the-icons-fonts-installed?
        (all-the-icons-install-fonts t)))
#+end_src

** Line Numbers
#+begin_src emacs-lisp
  (pkg display-line-numbers
    :ensure nil
    :config
    (global-display-line-numbers-mode 1)
    (setq-default display-line-numbers t
                  display-line-numbers-widen t
                  display-line-numbers-type 'relative
                  display-line-numbers-width-start t
                  display-line-numbers-grow-only t))
#+end_src
** Paren Highlighting
#+begin_src emacs-lisp
  (setq show-paren-delay 0)
  (show-paren-mode)
  (electric-pair-mode)
#+end_src
** Gruvbox Theme
#+begin_src emacs-lisp
  (pkg gruvbox-theme
    :config
    (load-theme 'gruvbox-dark-hard t))
#+end_src
** Start Screen
#+begin_src emacs-lisp
  (pkg dashboard
    :after (projectile)
    :init
    (setq dashboard-projects-backend 'projectile)
    :config
    (setq dashboard-items '((recents . 5) (bookmarks . 5) (agenda . 5) (projects . 5)))
    (dashboard-setup-startup-hook))
#+end_src
** Turn ^L (Line Feed) Into a Horizontal Line
#+begin_src emacs-lisp
  (pkg page-break-lines
    :config
    (setq page-break-lines-char ?-)
    (global-page-break-lines-mode))
#+end_src
** Indent Guides
#+begin_src emacs-lisp
  (pkg highlight-indent-guides
    :diminish highlight-indent-guides-mode
    :config
    (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
    (setq highlight-indent-guides-method 'character))
#+end_src
* Count Keys
#+begin_src emacs-lisp
  (pkg keyfreq ; count keys
    :config
    (keyfreq-mode 1)
    (keyfreq-autosave-mode 1)
    (require 'keyfreq)
    (setq keyfreq-excluded-commands '(self-insert-command)))
#+end_src
* Vim Keys (Evil)
** Evil Requirements
Use ~undo-tree~ and ~goto-chg~ to get the related features in evil.
#+begin_src emacs-lisp
  (pkg undo-tree
    :diminish undo-tree-mode
    :init
    (setq undo-tree-visualizer-timestamps t
          undo-tree-visualizer-lazy-drawing nil
          undo-tree-auto-save-history t)
                                          ; this is broken, the after save hook below fixes it, but it still needs to be here
    (let ((undo-dir (expand-file-name "undo" user-emacs-directory)))
      (setq undo-tree-history-directory-alist (list (cons "." undo-dir))))
    :config
    (add-hook 'after-save-hook '(lambda () (when undo-tree-mode (undo-tree-save-history nil t))))
    (global-undo-tree-mode))

  (pkg goto-chg)
#+end_src
** Evil
#+begin_src emacs-lisp
  (pkg evil
    :init
    (setq
     evil-want-keybinding nil
     evil-cross-lines t
     evil-search-module 'evil-search
     evil-undo-system 'undo-tree
     evil-ex-substitute-global t
     evil-want-C-u-scroll t
     evil-want-C-i-jump t
     evil-want-visual-char-semi-exclusive t
     evil-want-Y-yank-to-eol t
     evil-ex-search-vim-style-regexp t
     evil-ex-substitute-global t
     evil-ex-visual-char-range t ; column range for ex commands this doesn't work
     evil-symbol-word-search t	 ; more vim-like behavior
     evil-want-change-word-to-end nil			; ce and cw are now different
     shift-select-mode nil					; don't activate mark on shift-click
     )
    :config
    (evil-mode 1)
    (setq evil-emacs-state-cursor 'box
          evil-normal-state-cursor 'box
          evil-visual-state-cursor 'box
          evil-insert-state-cursor 'bar
          evil-replace-state-cursor 'hbar
          evil-operator-state-cursor 'hollow)
    (setq evil-extra-operator-eval-modes-alist
          '((lisp-mode slime-eval-region)
            (scheme-mode geiser-eval-region)
            (clojure-mode cider-eval-region)
            (ruby-mode ruby-send-region)
            (enh-ruby-mode ruby-send-region)
            (python-mode python-shell-send-region)
            (julia-mode julia-shell-run-region)))
    (evil-define-key 'motion 'global
      (kbd "M-e") 'evil-backward-word-end
      (kbd "M-E") 'evil-backward-WORD-end)
    (evil-define-key '(normal visual) 'global
      (kbd "<leader>;") 'execute-extended-command
      "ge" (evil-define-operator evil-eval (beg end)
             "Evaluate code."
             :move-point nil
             (let* ((ele (assoc major-mode evil-extra-operator-eval-modes-alist))
                    (f-a (cdr-safe ele))
                    (func (car-safe f-a))
                    (args (cdr-safe f-a)))
               (if (fboundp func)
                   (apply func beg end args)
                 (eval-region beg end t))))
      "gE" (evil-define-operator evil-eval-elisp-replace (beg end)
             "Evaluate code then replace with result."
             :move-point nil
             (let ((result (eval (car (read-from-string (buffer-substring-no-properties beg end))))))
               (evil-delete beg end nil ?_)
               (message "%S" result)
               (insert (prin1-to-string result))))
      "gc" (evil-define-operator evil-comment (beg end)
             "Commenting code."
             (comment-or-uncomment-region beg end))
      "gs" (evil-define-operator evil-replace-with-reg (beg end type register)
             "Replace region with active register."
             (interactive "<R><x>")
             (evil-delete beg end type ?_)
             (evil-paste-before 1 register)))
    (evil-define-key 'normal evil-ex-search-keymap
      "j" 'next-line-or-history-element
      "k" 'previous-line-or-history-element)
    (evil-define-key 'normal 'global
      "U" 'evil-redo
      (kbd "<escape>") 'evil-ex-nohighlight
      (kbd "<global-leader>s") (evil-define-command goto-scratch-buffer ()
                                 (switch-to-buffer "*scratch*"))
      (kbd "<global-leader>b") 'bookmark-jump
      (kbd "<global-leader>B") 'bookmark-set
      (kbd "<global-leader>td") 'toggle-debug-on-error
      "S" (evil-define-command evil-file-substitute () (evil-ex "%s/"))
      "gb" 'switch-to-buffer
      "gB" 'ibuffer)
    (evil-define-key nil 'global
      (kbd "C-h") 'evil-window-left
      (kbd "C-j") 'evil-window-down
      (kbd "C-k") 'evil-window-up
      (kbd "C-l") 'evil-window-right
      (kbd "C-q") 'image-kill-buffer
      (kbd "C-S-q") (interactive-chain 'save-buffer 'kill-buffer)
      (kbd "M-RET") (evil-define-command split-hoz-goto-buffer ()
                      (split-window-horizontally)
                      (evil-window-right 1)
                      (call-interactively #'switch-to-buffer))
      (kbd "M-DEL") (evil-define-command split-vert-goto-buffer ()
                      (split-window-vertically)
                      (evil-window-down 1)
                      (call-interactively #'switch-to-buffer))))

  (pkg evil-surround
    :config
    (global-evil-surround-mode 1))

  (pkg-github targets "noctuid/targets.el"
    :config
    (targets-setup t))

  (pkg evil-exchange
    :config (evil-exchange-install))

  (pkg evil-collection
    :diminish evil-collection-unimpaired-mode
    :after evil
    :init
    (setq evil-collection-setup-minibuffer t)
    :config
    (setq evil-collection-mode-list (delete 'lispy evil-collection-mode-list))
    (evil-collection-init)
    (dolist (i evil-collection-minibuffer-maps)
      (evil-define-key 'normal (eval i)
        "cc" (lambda () (interactive) (evil-change (line-beginning-position) (line-end-position)))
        "j" 'previous-complete-history-element
        "k" 'next-complete-history-element)))
#+end_src
* Center The Cursor
#+begin_src emacs-lisp
  (pkg centered-cursor-mode
    :diminish centered-cursor-mode
    :preface
    (setq-default require-final-newline nil)
    (setq mode-require-final-newline nil)
    :config
    (global-centered-cursor-mode 1))
#+end_src
* Languages
** Lisp
#+begin_src emacs-lisp
  (pkg lispy
    :defer t
    :diminish lispy-mode
    :after evil-collection)

  (pkg lispyville
    :defer t
    :after (targets lispy)
    :diminish lispyville-mode
    :preface
    (add-hook 'emacs-lisp-mode-hook 'lispyville-mode)
    (add-hook 'common-lisp-mode-hook 'lispyville-mode)
    (add-hook 'scheme-mode-hook 'lispyville-mode)
    (add-hook 'lisp-mode-hook 'lispyville-mode)
    :init
    (add-hook 'lispyville-mode-hook
              (cl-macrolet ((defto (name key)
                              `(targets-define-to ,name ',name nil object :bind t :keys ,key)))
                (lambda ()
                  (defto lispyville-comment "c")
                  (defto lispyville-atom "a")
                  (defto lispyville-list "f")
                  (defto lispyville-sexp "x")
                  (defto lispyville-function "d")
                  (defto lispyville-string "s"))))
    :config
    (lispyville-set-key-theme '(operators
                                c-w
                                prettify
                                (atom-movement t)
                                additional-movement
                                commentary
                                slurp/barf-cp
                                (escape insert)))
    (defmacro surround-paren-insert (object at-end)
      "Surround object and instert at the given end (either start or end)."
      `(lambda () (interactive)
         (evil-start-undo-step)
         (apply 'evil-surround-region
                (append (let* ((obj (,object))
                               (start (car obj)))
                          (if (eq (char-after start) ?')
                              (cons (+ 1 start) (cdr obj))
                            obj))
                        '(?\))))
         ,@(if (eq at-end 'end)
               '((lispyville-up-list)
                 (insert " ")
                 (evil-insert 1))
             '((forward-char)
               (insert " ")
               (backward-char 1)
               (evil-insert 1)))))
                                          ; TODO make these work for visual
    (evil-define-key '(visual normal) lispyville-mode-map
      (kbd "<leader>(") 'lispy-wrap-round
      (kbd "<leader>{") 'lispy-wrap-braces
      (kbd "<leader>[") 'lispy-wrap-brackets
      (kbd "<leader>)") 'lispyville-wrap-with-round
      (kbd "<leader>}") 'lispyville-wrap-with-braces
      (kbd "<leader>]") 'lispyville-wrap-with-brackets
      (kbd "M-j") 'lispyville-drag-forward
      (kbd "M-k") 'lispyville-drag-backward
      (kbd "<leader>@") 'lispy-splice
      (kbd "<leader>w") (surround-paren-insert targets-inner-lispyville-sexp start)
      (kbd "<leader>W") (surround-paren-insert targets-inner-lispyville-sexp end)
      (kbd "<leader>i") (surround-paren-insert targets-a-lispyville-list start)
      (kbd "<leader>I") (surround-paren-insert targets-a-lispyville-list end)
      (kbd "<leader>s") 'lispy-split
      (kbd "<leader>j") 'lispy-join
      (kbd "<leader>r") 'lispy-raise
      (kbd "<leader>R") 'lispyville-raise-list
      (kbd "<leader>h") (evil-define-command lispyville-insert-at-beginnging-of-list (count)
                          (interactive "<c>")
                          (lispyville-insert-at-beginning-of-list count)
                          (insert " ")
                          (backward-char))
      (kbd "<leader>l") 'lispyville-insert-at-end-of-list
      (kbd "<leader>o") 'lispyville-open-below-list
      (kbd "<leader>O") 'lispyville-open-above-list))

#+end_src
** Rust
#+begin_src emacs-lisp
  (pkg rustic
    :defer t
    :after (lsp lsp-ui)
    :preface
    (add-hook 'rust-mode-hook
              'rustic-mode)
    (setq lsp-rust-server 'rust-analyzer)
    (require 'mode-local)
    (setq-mode-local rustic-mode
                     lsp-ui-sideline-show-hover nil
                     lsp-rust-analyzer-cargo-watch-command "clippy")
    (setq rustic-indent-offset 2))
  (pkg flycheck-rust
    :defer t
    :after (flycheck)
    :preface
    (add-hook 'rust-mode-hook 'flycheck-rust-setup))
#+end_src
* Org
** Org-mode
#+begin_src emacs-lisp
  (pkg org
    :defer t
    :ensure nil
    :preface
    (evil-define-key 'normal 'global
      (kbd "<global-leader>a") 'org-agenda
      (kbd "<global-leader>A") (evil-define-command visit-roam-agenda ()
                                 (require 'org-roam)
                                 (org-roam-node-visit (org-roam-node-from-title-or-alias "Agenda"))
                                 (goto-char (point-max))))
    :init
    (add-hook 'org-mode-hook (lambda ()
                               (org-indent-mode)
                               (setq-local electric-pair-inhibit-predicate
                                           `(lambda (p) (or (char-equal p ?<)
                                                            (,electric-pair-inhibit-predicate p))))))
    (evil-define-key 'normal org-mode-map
      (kbd "<leader>ti") 'org-display-inline-images
      (kbd "<leader>tI") 'org-remove-inline-images)
    (setq org-todo-keywords '((sequence "TODO" "IN-PROGRESS" "DONE"))
          org-hide-emphasis-markers t
          org-pretty-entities t
          org-pretty-entities-include-sub-superscripts t)
    :config
    (custom-set-faces
     '(org-level-1 ((t (:inherit outline-1 :height 1.5))))
     '(org-level-2 ((t (:inherit outline-2 :height 1.4))))
     '(org-level-3 ((t (:inherit outline-3 :height 1.3))))
     '(org-level-4 ((t (:inherit outline-4 :height 1.2))))
     '(org-level-5 ((t (:inherit outline-5 :height 1.1)))))
    ;; Don't make text bigger after 8 levels.
    (setq org-cycle-level-faces nil)
    ;; Snippets for structure templates..
    (require 'org-tempo))
#+end_src
** Hide Org Markup
#+begin_src emacs-lisp
  (pkg org-appear
    :defer t
    :after (org)
    :preface
    (add-hook 'org-mode-hook 'org-appear-mode)
    (mapc (lambda (sym) (set sym t))
          '(org-appear-autoemphasis
            org-appear-autolinks
            org-appear-autoentities
            org-appear-autokeywords
            org-appear-autosubmarkers)))
#+end_src
** Fancy Dashes for Lists
#+begin_src emacs-lisp
  (pkg org-superstar
    :defer t
    :after (org)
    :preface
    (add-hook 'org-mode-hook 'evil-org-mode)
    :init
    (setq org-superstar-leading-bullet "·")
    :config
    (cl-delete-if (lambda (elt) (eq (car elt) ?+)) org-superstar-item-bullet-alist))
#+end_src
** Roam
#+begin_src emacs-lisp
  (pkg org-roam
    :defer t
    :after (org)
    :preface
    (add-hook 'org-mode-hook (lambda () (require 'org-roam)))
    (setq org-roam-v2-ack t
          org-roam-completion-everywhere t
          org-roam-directory (file-truename "~/org"))
    (defun org-roam-get-unlinked-node-ids ()
      "Get the IDs of nodes with no backlinks."
      (cl-set-difference (mapcar 'car (org-roam-db-query [:select id :from nodes]))
                         (mapcar 'car (org-roam-db-query [:select dest :from links]))
                         :test 'string=))
    (evil-define-key 'normal 'global
      (kbd "<global-leader>nf") 'org-roam-node-find
      (kbd "<global-leader>nu")
      (evil-define-command org-roam-unlinked-node-find (&optional other-window initial-input filter-fn)
        "Find nodes with no backlinks."
        (let ((titles (mapcar (lambda (id) (-> id org-roam-node-from-id org-roam-node-title))
                              (org-roam-get-unlinked-node-ids))))
          (org-roam-node-visit (org-roam-node-from-title-or-alias
                                (completing-read "Node: " titles filter-fn t initial-input))
                               other-window))))
    :config
    (setq org-roam-capture-templates
          '(("d" "default" plain "\n%?"
             :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
             :unnarrowed t)
            ("c" "computer science A-level" plain "\n%?"
             :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: :CSAL:\n")
             :unnarrowed t)
            ("p" "physics A-level" plain "\n%?"
             :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: :PAL:\n")
             :unnarrowed t)
            ("m" "maths A-level" plain "\n%?"
             :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: :MAL:\n")
             :unnarrowed t)
            ("f" "further maths A-level" plain "\n%?"
             :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: :FMAL:\n")
             :unnarrowed t)))
    (evil-define-key 'insert org-mode-map
      (kbd "<leader>n") 'org-roam-node-insert)
    (evil-define-key 'normal org-mode-map
      (kbd "<leader>nb") 'org-roam-buffer-toggle
      (kbd "<leader>ng") 'org-roam-graph
      (kbd "<leader>ni") 'org-roam-node-insert
      (kbd "<leader>nc") 'org-roam-capture
      (kbd "<leader>nn") 'org-id-get-create
      (kbd "<leader>nt") 'org-roam-tag-add
      (kbd "<leader>nT") 'org-roam-tag-remove
      (kbd "<leader>nd") 'org-roam-dailies-capture-today
      (kbd "<leader>na") 'org-roam-alias-add)
    (org-roam-db-autosync-mode)
    ;; If using org-roam-protocol
    ;; (require 'org-roam-protocol)
    )
#+end_src
** Evil Integration
#+begin_src emacs-lisp
  (pkg evil-org
    :defer t
    :after (evil org)
    :preface
    (add-hook 'org-mode-hook 'evil-org-mode)
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys)
    (evil-define-key 'insert org-mode-map
      (kbd "M-h") 'org-metaleft
      (kbd "M-l") 'org-metaright)
    (evil-define-key 'normal org-capture-mode-map
      (leader "k") 'org-capture-kill
      (leader "c") 'org-capture-finalize)
    (evil-define-key '(normal insert) org-mode-map
      (kbd "<leader>.") 'org-time-stamp
      (kbd "<leader>l") 'org-insert-link)
    (evil-define-key 'normal org-mode-map
      (kbd "<leader>a") 'org-agenda-file-to-front
      (kbd "<leader>r") 'org-remove-file
      (kbd "<leader>c") 'org-ctrl-c-ctrl-c
      (kbd "<leader>l") 'org-insert-link
      (kbd "<leader>d") 'org-deadline
      (kbd "<leader>s") 'org-schedule
      (kbd "<leader>p") 'org-priority
      (kbd "<leader>RET") 'org-open-at-point
      (kbd "<leader>t") 'org-shiftright
      (kbd "<leader>T") 'org-shiftleft
      (kbd "<leader>be") 'org-edit-src-code
      (kbd "<leader>bs") (evil-define-command evil-split-org-strucutre-template ()
                           (let ((point (point)) start-line end-line)
                             (cl-destructuring-bind ((_ end _) (start _ _)) `(,(evil-org-inner-element)
                                                                              ,(evil-org-an-element))
                               (cl-loop for (line var) in `((,start start-line) (,end end-line))
                                        do (goto-char line)
                                        do (set var (buffer-substring-no-properties
                                                     (line-beginning-position)
                                                     (line-end-position))))
                               (goto-char point)
                               (evil-insert-newline-below)
                               (insert (format "%s\n%s" end-line start-line)))))
      (kbd "<leader>bw") (evil-define-operator evil-wrap-org-structure-template (beg end)
                           "Wrap region in structure template"
                           :type line
                           (goto-char beg)
                           (set-mark end)
                           (call-interactively 'org-insert-structure-template))))
#+end_src
* Show Keyboard Shortcuts
#+begin_src emacs-lisp
  (pkg which-key
    :diminish which-key-mode
    :config (which-key-mode))
#+end_src
* Completion
** Minibuffer
*** Completions
#+begin_src emacs-lisp
  (pkg selectrum
    :after (evil)
    :config
    (evil-define-key '(insert normal) selectrum-minibuffer-map
      (kbd "M-RET") 'selectrum-submit-exact-input
      (kbd "M-TAB") 'selectrum-insert-current-candidate
      (kbd "TAB") 'selectrum-next-candidate
      (kbd "<backtab>") 'selectrum-previous-candidate)
    (selectrum-mode))
#+end_src
*** Descriptions in Margins
#+begin_src emacs-lisp
  (pkg marginalia
    :init
    (marginalia-mode))
#+end_src
** Buffer
*** Completions
#+begin_src emacs-lisp
  (pkg company
    :diminish company-mode
    :after (evil evil-collection)
    :init
    (setq company-idle-delay 0
          company-minimum-prefix-length 1
          company-selection-wrap-around t)
    :config
    (add-hook 'company-mode-hook 'company-tng-mode)
    (evil-define-key 'insert company-mode-map
      (kbd "TAB") 'company-complete)
    (evil-define-key nil company-active-map
      (kbd "<tab>") (interactive-chain 'company-complete-common 'company-select-next)
      (kbd "TAB") 'company-select-next
      (kbd "<backtab>") 'company-select-previous
      (kbd "M-TAB") 'company-complete-common
      (kbd "M-q") (interactive-chain 'company-select-first 'company-select-previous)
      (kbd "<next>") 'company-next-page
      (kbd "<prior>") 'company-previous-page
      (kbd "<return>") nil
      (kbd "RET") nil)
    (global-company-mode))
#+end_src
*** Prettify
#+begin_src emacs-lisp
  (pkg-github company-box "jack-faller/company-box" ; use my fix for tng-mode docstrings
    :defer t
    :after (company all-the-icons)
    :diminish company-box-mode
    :preface
    (add-hook 'company-tng-mode-hook 'company-box-mode)
    :config
    (setq company-box-doc-delay 0.13
          company-box-icons-all-the-icons
          `((Unknown . ,(all-the-icons-material "find_in_page" :height 0.8 :face 'all-the-icons-purple))
            (Text . ,(all-the-icons-material "text_fields" :height 0.8 :face 'all-the-icons-green))
            (Method . ,(all-the-icons-material "functions" :height 0.8 :face 'all-the-icons-red))
            (Function . ,(all-the-icons-material "functions" :height 0.8 :face 'all-the-icons-red))
            (Constructor . ,(all-the-icons-material "functions" :height 0.8 :face 'all-the-icons-red))
            (Field . ,(all-the-icons-material "functions" :height 0.8 :face 'all-the-icons-red))
            (Variable . ,(all-the-icons-material "adjust" :height 0.8 :face 'all-the-icons-blue))
            (Class . ,(all-the-icons-material "class" :height 0.8 :face 'all-the-icons-red))
            (Interface . ,(all-the-icons-material "settings_input_component" :height 0.8 :face 'all-the-icons-red))
            (Module . ,(all-the-icons-material "view_module" :height 0.8 :face 'all-the-icons-red))
            (Property . ,(all-the-icons-material "settings" :height 0.8 :face 'all-the-icons-red))
            (Unit . ,(all-the-icons-material "straighten" :height 0.8 :face 'all-the-icons-red))
            (Value . ,(all-the-icons-material "filter_1" :height 0.8 :face 'all-the-icons-red))
            (Enum . ,(all-the-icons-material "plus_one" :height 0.8 :face 'all-the-icons-red))
            (Keyword . ,(all-the-icons-material "filter_center_focus" :height 0.8 :face 'all-the-icons-red))
            (Snippet . ,(all-the-icons-material "short_text" :height 0.8 :face 'all-the-icons-red))
            (Color . ,(all-the-icons-material "color_lens" :height 0.8 :face 'all-the-icons-red))
            (File . ,(all-the-icons-material "insert_drive_file" :height 0.8 :face 'all-the-icons-red))
            (Reference . ,(all-the-icons-material "collections_bookmark" :height 0.8 :face 'all-the-icons-red))
            (Folder . ,(all-the-icons-material "folder" :height 0.8 :face 'all-the-icons-red))
            (EnumMember . ,(all-the-icons-material "people" :height 0.8 :face 'all-the-icons-red))
            (Constant . ,(all-the-icons-material "pause_circle_filled" :height 0.8 :face 'all-the-icons-red))
            (Struct . ,(all-the-icons-material "streetview" :height 0.8 :face 'all-the-icons-red))
            (Event . ,(all-the-icons-material "event" :height 0.8 :face 'all-the-icons-red))
            (Operator . ,(all-the-icons-material "control_point" :height 0.8 :face 'all-the-icons-red))
            (TypeParameter . ,(all-the-icons-material "class" :height 0.8 :face 'all-the-icons-red))
            ;; (Template   . ,(company-box-icons-image "Template.png"))))
            (Yasnippet . ,(all-the-icons-material "short_text" :height 0.8 :face 'all-the-icons-green))
            (ElispFunction . ,(all-the-icons-material "functions" :height 0.8 :face 'all-the-icons-red))
            (ElispVariable . ,(all-the-icons-material "check_circle" :height 0.8 :face 'all-the-icons-blue))
            (ElispFeature . ,(all-the-icons-material "stars" :height 0.8 :face 'all-the-icons-orange))
            (ElispFace . ,(all-the-icons-material "format_paint" :height 0.8 :face 'all-the-icons-pink)))
          company-box-icons-alist 'company-box-icons-all-the-icons))
#+end_src
** Eldoc
#+begin_src emacs-lisp
  (pkg eldoc
    :defer t
    :ensure nil
    :diminish eldoc-mode
    :config
    (setq eldoc-idle-delay 0))
#+end_src
** Language Server Support (LSP)
#+begin_src emacs-lisp
  (pkg lsp-mode
    :defer t
    :after (company flycheck)
    :init
    (setq lsp-eldoc-enable-hover nil
          lsp-signature-render-documentation nil)
    :config
    (add-hook 'lsp-mode-hook 'evil-normal-state)
    (evil-define-key 'normal lsp-mode-map
      (kbd "<leader>=") 'lsp-format-buffer
      (kbd "<leader>gd") 'lsp-find-definition
      (kbd "<leader>gD") 'lsp-find-declaration
      (kbd "<leader>gr") 'lsp-find-references
      (kbd "<leader>gi") 'lsp-find-implementation
      (kbd "<leader>gt") 'lsp-find-type-definition
      ;; (kbd "<leader>gh") 'hierarchy
      (kbd "<leader>ga") 'xref-find-apropos
      (kbd "<leader>o") 'lsp-organize-imports
      (kbd "<leader>r") 'lsp-rename
      (kbd "<leader>te") (interactive-toggle lsp-eldoc-enable-hover)
      (kbd "<leader>a") 'lsp-execute-code-action
      "K" 'lsp-ui-doc-show
      "gK" 'lsp-describe-thing-at-point))
#+end_src
*** Prettify
#+begin_src emacs-lisp
  (pkg lsp-ui
    :defer t
    :preface
    (setq lsp-ui-doc-enable t
          lsp-ui-doc-delay most-positive-fixnum
          lsp-ui-doc-position 'top
          lsp-ui-sideline-show-hover t
          lsp-ui-sideline-show-symbol t
          lsp-ui-sideline-show-diagnostics t
          lsp-ui-sideline-show-code-actions t))


#+end_src
** Completions history
#+begin_src emacs-lisp
  (pkg prescient
    :config (prescient-persist-mode))
  (pkg selectrum-prescient
    :after (selectrum prescient)
    :config (selectrum-prescient-mode))
  (pkg company-prescient
    :after (company prescient)
    :config (company-prescient-mode))
#+end_src
* File Management
** File Tree
#+begin_src emacs-lisp
  (pkg treemacs
    :defer t
    :preface
    (evil-define-key 'normal 'global
      "gt" 'treemacs)
    (pkg treemacs-evil
      :after (treemacs evil))
    (pkg treemacs-all-the-icons
      :after (treemacs all-the-icons)
      :config
      (treemacs-load-theme 'all-the-icons))
    (pkg treemacs-projectile
      :after (treemacs projectile))
    (pkg treemacs-icons-dired
      :after (treemacs))
    (pkg treemacs-magit
      :after (treemacs magit)))
#+end_src
** Projects
#+begin_src emacs-lisp
  (pkg projectile
    :config
    (projectile-mode)
    (setq compilation-scroll-output t)
    (evil-define-key '(insert normal) projectile-mode-map
      (kbd "<f5>") 'projectile-run-project)
    (dolist (map evil-collection-compile-maps)
      (evil-define-key 'normal map
        "q" (interactive-chain 'kill-compilation 'quit-window)))
    (setq projectile-project-search-path '("~/code/")))
#+end_src
* Error Reporting with Fly-*
** Spellcheck
#+begin_src emacs-lisp
  (pkg flyspell
    :preface
    (add-hook 'prog-mode-hook 'flyspell-prog-mode)
    (add-hook 'text-mode-hook 'flyspell-mode)
    :init
    (setq flyspell-issue-message-flag nil)
    :config
    (evil-define-key 'normal flyspell-mode-map
      "[s" 'evil-prev-flyspell-error
      "]s" 'evil-next-flyspell-error))
#+end_src
** Error Check
#+begin_src emacs-lisp
  (pkg flycheck
    :defer t
    :preface
    (add-hook 'emacs-lisp-mode-hook (lambda () (flycheck-mode -1)))
    :config
    (evil-define-key 'normal flycheck-mode-map
      (kbd "<leader>e") 'list-flycheck-errors
      "]]" 'flycheck-next-error
      "[[" 'flycheck-previous-error)
    (global-flycheck-mode))
  (pkg flycheck-inline
    :defer t
    :after (flycheck)
    :preface
    (add-hook 'flycheck-mode-hook 'flycheck-inline-mode)
    (setq flycheck-display-errors-delay 0.2))
#+end_src
* Magit
#+begin_src emacs-lisp
  (pkg magit
    :after (evil-collection)
    :defer t
    :preface
    (evil-define-key 'normal 'global
      (kbd "<global-leader>m") 'magit)
    (evil-define-key 'normal magit-mode-map
      (kbd "M-h") 'magit-section-up
      (kbd "M-j") 'magit-section-forward-sibling
      (kbd "M-k") 'magit-section-backward-sibling))
#+end_src
